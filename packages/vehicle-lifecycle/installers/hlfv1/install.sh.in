ME=`basename "$0"`
if [ "${ME}" = "install-hlfv1-{{VEHICLE-LIFECYCLE-VERSION}}.sh" ]; then
  echo "Please re-run as >   cat install-hlfv1-{{VEHICLE-LIFECYCLE-VERSION}}.sh | bash"
  exit 1
fi
(cat > composer.sh; chmod +x composer.sh; exec bash composer.sh)
#!/bin/bash
set -ev

# Docker stop function
function stop()
{
P1=$(docker ps -q)
if [ "${P1}" != "" ]; then
  echo "Killing all running containers"  &2> /dev/null
  docker kill ${P1}
fi

P2=$(docker ps -aq)
if [ "${P2}" != "" ]; then
  echo "Removing all containers"  &2> /dev/null
  docker rm ${P2} -f
fi
}

if [ "$1" == "stop" ]; then
 echo "Stopping all Docker containers" >&2
 stop
 exit 0
fi

# Get the current directory.
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Get the full path to this script.
SOURCE="${DIR}/composer.sh"

# Create a work directory for extracting files into.
WORKDIR="$(pwd)/composer-data-{{COMPOSER-VERSION}}"
rm -rf "${WORKDIR}" && mkdir -p "${WORKDIR}"
cd "${WORKDIR}"

# Find the PAYLOAD: marker in this script.
PAYLOAD_LINE=$(grep -a -n '^PAYLOAD:$' "${SOURCE}" | cut -d ':' -f 1)
echo PAYLOAD_LINE=${PAYLOAD_LINE}

# Find and extract the payload in this script.
PAYLOAD_START=$((PAYLOAD_LINE + 1))
echo PAYLOAD_START=${PAYLOAD_START}
tail -n +${PAYLOAD_START} "${SOURCE}" | tar -xzf -

# Ensure sensible permissions on the extracted files.
find . -type d | xargs chmod a+rx
find . -type f | xargs chmod a+r

# Pull the latest versions of all the Docker images.
docker pull hyperledger/composer-playground:{{COMPOSER-VERSION}}
docker pull hyperledger/composer-cli:{{COMPOSER-VERSION}}
docker pull hyperledger/composer-rest-server:{{COMPOSER-VERSION}}
docker pull hyperledger/vehicle-lifecycle-vda:{{VEHICLE-LIFECYCLE-VERSION}}
docker pull hyperledger/vehicle-lifecycle-manufacturing:{{VEHICLE-LIFECYCLE-VERSION}}
docker pull hyperledger/vehicle-lifecycle-car-builder:{{VEHICLE-LIFECYCLE-VERSION}}
docker pull node:8

# stop all the docker containers
stop

# run the fabric-dev-scripts to get a running fabric
./fabric-dev-servers/downloadFabric.sh
./fabric-dev-servers/startFabric.sh

# create a card store on the local file system to be shared by the demo
rm -fr $(pwd)/.vld-card-store  
mkdir $(pwd)/.vld-card-store
chmod 777 $(pwd)/.vld-card-store

# Create the environment variables with the connection profile in.
rm -fr $(pwd)/vldstage
mkdir $(pwd)/vldstage
chmod 777 $(pwd)/vldstage
echo '{
    "name": "hlfv1",
    "description": "Hyperledger Fabric v1.0",
    "type": "hlfv1",
    "timeout": 300,
    "orderers": [
        {
            "url": "grpc://orderer.example.com:7050"
        }
    ],
    "channel": "composerchannel",
    "mspID": "Org1MSP",
    "ca": {"url": "http://ca.org1.example.com:7054", "name": "ca.org1.example.com"},
    "peers": [
        {
            "requestURL": "grpc://peer0.org1.example.com:7051",
            "eventURL": "grpc://peer0.org1.example.com:7053"
        }
    ]
}' > $(pwd)/vldstage/connection.json

# build the PeerAdmin card and import it
docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/fabric-dev-servers/fabric-scripts/hlfv1/composer/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp:/home/composer/PeerAdmin \
  hyperledger/composer-cli:{{COMPOSER-VERSION}} \
  card create -p vldstage/connection.json -u PeerAdmin -r PeerAdmin -r ChannelAdmin -f /home/composer/vldstage/PeerAdmin.card -c PeerAdmin/signcerts/Admin@org1.example.com-cert.pem -k PeerAdmin/keystore/114aab0e76bf0c78308f89efc4b8c9423e31568da0c340ca187a9b17aa9a4457_sk

docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/fabric-dev-servers/fabric-scripts/hlfv1/composer/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp:/home/composer/PeerAdmin \
  hyperledger/composer-cli:{{COMPOSER-VERSION}} \
  card import -f /home/composer/vldstage/PeerAdmin.card


# Start playground
docker run \
  -d \
  --network composer_default \
  --name composer \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -p 8080:8080 \
  hyperledger/composer-playground:{{COMPOSER-VERSION}}

# Wait for playground to start
sleep 5

# Deploy the business network archive.
docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/vehicle-lifecycle-network.bna:/home/composer/vehicle-lifecycle-network.bna \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  hyperledger/composer-cli:{{COMPOSER-VERSION}} \
  network deploy -c PeerAdmin@hlfv1 -a vehicle-lifecycle-network.bna -A admin -S adminpw -f /home/composer/vldstage/bnaadmin.card

docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/vldstage:/home/composer/vldstage \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  hyperledger/composer-cli:{{COMPOSER-VERSION}} \
  card import -f /home/composer/vldstage/bnaadmin.card


# Submit the setup transaction.
docker run \
  --rm \
  --network composer_default \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  hyperledger/composer-cli:{{COMPOSER-VERSION}} \
  transaction submit -c admin@vehicle-lifecycle-network -d '{"$class": "org.acme.vehicle.lifecycle.SetupDemo"}'

# correct permissions so that node-red can read cardstore and node-sdk can write to client-data
docker exec \
  composer \
  find /home/composer/.composer -name "*" -exec chmod 777 {} \;

# Start the REST server.
docker run \
  -d \
  --network composer_default \
  --name rest \
  -v $(pwd)/.vld-card-store:/home/composer/.composer \
  -e COMPOSER_CARD=admin@vehicle-lifecycle-network \
  -e COMPOSER_NAMESPACES=required \
  -p 3000:3000 \
  hyperledger/composer-rest-server:{{COMPOSER-VERSION}}

# Wait for the REST server to start and initialize.
sleep 10

# Start Node-RED.
docker run \
  -d \
  --network composer_default \
  --name node-red \
  -v $(pwd)/.vld-card-store:/root/.composer \
  -e COMPOSER_BASE_URL=http://rest:3000 \
  -e NODE_PATH=/node_modules \
  -e NPM_CONFIG_LOGLEVEL=warn \
  -v $(pwd)/flows.json:/data/flows.json \
  -p 1880:1880 \
  --entrypoint sh \
  node:8 \
  -c "npm install node-red-contrib-composer && npm install node-red && node node_modules/node-red/red.js -v /data/flows.json --userDir ."

# Wait for Node-RED to start and initialize.
sleep 30

# Start the VDA application.
docker run \
-d \
--network composer_default \
--name vda \
-e COMPOSER_BASE_URL=http://rest:3000 \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 6001:6001 \
hyperledger/vehicle-lifecycle-vda:{{VEHICLE-LIFECYCLE-VERSION}}

# Start the manufacturing application.
docker run \
-d \
--network composer_default \
--name manufacturing \
-e COMPOSER_BASE_URL=http://rest:3000 \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 6002:6001 \
hyperledger/vehicle-lifecycle-manufacturing:{{VEHICLE-LIFECYCLE-VERSION}}

# Start the car-builder application.
docker run \
-d \
--network composer_default \
--name car-builder \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 8100:8100 \
hyperledger/vehicle-lifecycle-car-builder:{{VEHICLE-LIFECYCLE-VERSION}}

# Wait for the applications to start and initialize.
sleep 10

# Open the playground in a web browser.
URLS="http://localhost:8100 http://localhost:6002 http://localhost:6001 http://localhost:8080 http://localhost:3000/explorer/ http://localhost:1880"
case "$(uname)" in
"Darwin") open ${URLS}
          ;;
"Linux")  if [ -n "$BROWSER" ] ; then
	       	        $BROWSER http://localhost:8100 http://localhost:6002 http://localhost:6001 http://localhost:8080 http://localhost:3000/explorer/ http://localhost:1880
	        elif    which x-www-browser > /dev/null ; then
                  nohup x-www-browser ${URLS} < /dev/null > /dev/null 2>&1 &
          elif    which xdg-open > /dev/null ; then
                  for URL in ${URLS} ; do
                          xdg-open ${URL}
	                done
          elif  	which gnome-open > /dev/null ; then
	                gnome-open http://localhost:8100 http://localhost:6002 http://localhost:6001 http://localhost:8080 http://localhost:3000/explorer/ http://localhost:1880
	        else
    	            echo "Could not detect web browser to use - please launch Composer Playground URL using your chosen browser ie: <browser executable name> http://localhost:8080 or set your BROWSER variable to the browser launcher in your PATH"
	        fi
          ;;
*)        echo "Playground not launched - this OS is currently not supported "
          ;;
esac

# Exit; this is required as the payload immediately follows.
exit 0

