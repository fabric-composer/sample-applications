(cat > composer.sh; chmod +x composer.sh; exec bash composer.sh)
#!/bin/bash
set -ev

# Docker stop function
function stop()
{
P1=$(docker ps -q)
if [ "${P1}" != "" ]; then
  echo "Killing all running containers"  &2> /dev/null
  docker kill ${P1}
fi

P2=$(docker ps -aq)
if [ "${P2}" != "" ]; then
  echo "Removing all containers"  &2> /dev/null
  docker rm ${P2} -f
fi
}

if [ "$1" == "stop" ]; then
 echo "Stopping all Docker containers" >&2
 stop
 exit 0
fi

# Get the current directory.
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Get the full path to this script.
SOURCE="${DIR}/composer.sh"

# Create a work directory for extracting files into.
WORKDIR="$(pwd)/composer-data"
rm -rf "${WORKDIR}" && mkdir -p "${WORKDIR}"
cd "${WORKDIR}"

# Find the PAYLOAD: marker in this script.
PAYLOAD_LINE=$(grep -a -n '^PAYLOAD:$' "${SOURCE}" | cut -d ':' -f 1)
echo PAYLOAD_LINE=${PAYLOAD_LINE}

# Find and extract the payload in this script.
PAYLOAD_START=$((PAYLOAD_LINE + 1))
echo PAYLOAD_START=${PAYLOAD_START}
tail -n +${PAYLOAD_START} "${SOURCE}" | tar -xzf -

# Use the latest released version if not specified.
if [ -z "${COMPOSER_VERSION}" ]
then
  export COMPOSER_VERSION=latest
fi

# Pull the latest Docker images from Docker Hub.
docker-compose pull
docker pull hyperledger/fabric-ccenv:x86_64-1.0.0-alpha
docker pull hyperledger/composer-cli:${COMPOSER_VERSION}
docker pull hyperledger/composer-rest-server:${COMPOSER_VERSION}
docker pull hyperledger/vehicle-lifecycle-vda
docker pull hyperledger/vehicle-lifecycle-manufacturing
docker pull hyperledger/vehicle-lifecycle-car-builder
docker pull nodered/node-red-docker

# Kill any other Docker containers.
stop

# Start all Docker containers.
docker-compose -p composer up -d

# Wait for the Docker containers to start and initialize.
sleep 10

# Create the channel on peer0.
docker exec peer0 peer channel create -o orderer0:7050 -c mychannel -f /etc/hyperledger/configtx/mychannel.tx

# Join peer0 to the channel.
docker exec peer0 peer channel join -b mychannel.block

# Fetch the channel block on peer1.
docker exec peer1 peer channel fetch -o orderer0:7050 -c mychannel

# Join peer1 to the channel.
docker exec peer1 peer channel join -b mychannel.block

# Wait for the channel to start and initialize.
sleep 10

# Deploy the business network archive.
docker run \
  --rm \
  --network composer_default \
  -v $(pwd):/home/composer \
  hyperledger/composer-cli:${COMPOSER_VERSION} \
  composer network deploy -p hlfabric -a vehicle-lifecycle-network.bna -i admin -s adminpw

# Submit the setup transaction.
docker run \
  --rm \
  --network composer_default \
  -v $(pwd):/home/composer \
  hyperledger/composer-cli:${COMPOSER_VERSION} \
  composer transaction submit -p hlfabric -n org.acme.biznet -i admin -s adminpw -d '{"$class": "org.acme.vehicle.lifecycle.SetupDemo"}'

# Start the REST server.
docker run \
  -d \
  --network composer_default \
  --name rest \
  -v $(pwd)/.composer-connection-profiles:/home/composer/.composer-connection-profiles \
  -v $(pwd)/.hfc-key-store:/home/composer/.hfc-key-store \
  -e COMPOSER_CONNECTION_PROFILE=hlfabric \
  -e COMPOSER_BUSINESS_NETWORK=org.acme.biznet \
  -e COMPOSER_ENROLLMENT_ID=admin \
  -e COMPOSER_ENROLLMENT_SECRET=adminpw \
  -e COMPOSER_NAMESPACES=required \
  -p 4000:3000 \
  hyperledger/composer-rest-server:${COMPOSER_VERSION}

# Wait for the REST server to start and initialize.
sleep 10

# Start Node-RED.
docker run \
  -d \
  --network composer_default \
  --name node-red \
-v $(pwd)/.composer-connection-profiles:/usr/src/node-red/.composer-connection-profiles \
-v $(pwd)/.hfc-key-store:/usr/src/node-red/.hfc-key-store \
  -v $(pwd):/home/composer \
  -e COMPOSER_BASE_URL=http://rest:3000 \
  -v $(pwd)/flows.json:/data/flows.json \
  -p 1880:1880 \
  nodered/node-red-docker

# Wait for the applications and Node-RED to start and initialize.
sleep 10
# Install custom nodes
docker exec node-red bash -c "cd /data && npm install node-red-contrib-composer"
docker restart node-red
sleep 10

# Start the VDA application.
docker run \
-d \
--network composer_default \
--name vda \
-e COMPOSER_BASE_URL=http://rest:3000 \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 6001:6001 \
hyperledger/vehicle-lifecycle-vda

# Start the manufacturing application.
docker run \
-d \
--network composer_default \
--name manufacturing \
-e COMPOSER_BASE_URL=http://rest:3000 \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 6002:6001 \
hyperledger/vehicle-lifecycle-manufacturing

# Start the car-builder application.
docker run \
-d \
--network composer_default \
--name car-builder \
-e NODE_RED_BASE_URL=ws://node-red:1880 \
-p 8100:8100 \
hyperledger/vehicle-lifecycle-car-builder



# Open the playground in a web browser.
if [ "$(uname)" = "Darwin" ]
then
  open http://localhost:8080 http://localhost:4000/explorer/ http://localhost:1880 http://localhost:6001 http://localhost:6002 http://localhost:8100
fi

# Exit; this is required as the payload immediately follows.
exit 0
